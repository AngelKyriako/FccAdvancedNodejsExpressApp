var seeds = {
  before: "\/\/ use this: http:\/\/www.freeformatter.com\/javascript-escape.html\r\n\/\/ to escape the script. Set the beforeTestsString variable in\r\n\/\/ the seeds.js to escaped string  \r\n\r\nfunction ChallengeTester(serverUrl, challengeId, assert) {\r\n  \r\n  var hostUrl = location.protocol + \'\/\/\' + location.hostname;\r\n  \r\n  var CHALLENGE = {\r\n    SERVER_SIDE_INDEX_PAGE: 1,\r\n    MESSAGES_IN_VIEW: 2,\r\n    SIGNIN: 3,\r\n    LOGOUT: 4,\r\n    SIGNUP: 5,\r\n    CREATE_MESSAGE: 6,\r\n    CREATE_MESSAGE_WITH_VIEW: 7,\r\n    CREATE_MESSAGE_WITH_SOCKETS: 8,\r\n    GET_SESSION: 9,\r\n    GET_GEO: 10,\r\n    GET_GEO_AND_SET_COOKIE: 11,\r\n    GET_DEFAULT_AVATAR: 12\r\n  };\r\n  \r\n  var ROUTE = {\r\n    INDEX: getServerRoute(),\r\n    LOGIN: getServerRoute(\'\/auth\/local\'),\r\n    REGISTER: getServerRoute(\'\/auth\/local\/register\'),\r\n    LOGOUT: getServerRoute(\'\/auth\/logout\'),\r\n    MESSAGE: getServerRoute(\'\/api\/message\'),\r\n    ME: getServerRoute(\'\/api\/me\'),\r\n    GEO: getServerRoute(\'\/api\/geo\'),\r\n    AVATAR_DEFAULT: getServerRoute(\'\/avatar\/default\'),\r\n\r\n  };\r\n  \r\n  var GUEST = new User({username: \'guestuser\', password: \'guestuser\', name: \'guest\'});\r\n  \r\n  function User(json) {\r\n    \r\n    var self = json;\r\n    \r\n    this.toParams = function toParams() {\r\n      var str = \'\';\r\n      for (var key in self) {\r\n        if (self.hasOwnProperty(key)) {\r\n          str += \'&\'+key+\'=\'+self[key];\r\n        }  \r\n      }\r\n      \r\n      return str;\r\n    };\r\n    \r\n    this.shouldEqual = function shouldEqual(user) {\r\n      assert(user, \'the server session user should be passed into the view before compilation\');\r\n      assert(user.username === self.username, \'session user username should equal to \"\'+self.username+\'\", got \"\' + user.username + \'\" instead\');\r\n      assert(user.name === self.name, \'session user name should equal to \"\'+self.name+\'\", got \"\' + user.name + \'\" instead\');\r\n      assert(user.passports, \'session user should have a passports array property\');\r\n      assert(user.passports.length === 1, \'session user should have a passports array of one element\');\r\n      assert(user.passports[0].type === \'local\', \'session user should have a a passport of type local attached, got \"\' + user.passports[0].type + \'\" instead\');\r\n      assert(user.passports[0].password !== self.password, \'the passport password should be encrypted\');\r\n    }\r\n  }\r\n  \r\n  function Message(json) {\r\n    this.text = json.text;\r\n    this.geo = json.geo;\r\n    \r\n    this.toParams = function toParams() {\r\n      var str = \'text=\'+this.text;\r\n      if (this.geo) {\r\n        \/\/@TODO\r\n      }\r\n      \r\n      return str;\r\n    };\r\n  }\r\n  \r\n  function request(method, route, testHandler, dataToSent, opts) {\r\n    if (!opts) {\r\n      opts = {};\r\n    }\r\n    \r\n    var req = new XMLHttpRequest();\r\n    \r\n    req.onload = testHandler;\r\n    \r\n    req.open(method, route, true);\r\n    \r\n    req.setRequestHeader(\'Content-Type\', \'application\/x-www-form-urlencoded; charset=UTF-8\');\r\n    \r\n    req.withCredentials = true;\r\n    \r\n    req.send(dataToSent);        \r\n  }\r\n  \r\n  function getServerRoute(route) {\r\n    if (!route) route = \'\';\r\n    \r\n    return serverUrl + route;\r\n  }\r\n  \r\n  function signInViewExists(html) {\r\n    return html.indexOf(\'<div id=\"signin-local\">\') !== -1 &&\r\n           html.indexOf(\'<div id=\"signup-local\">\') !== -1;\r\n  }\r\n  \r\n  function signOutViewExists(html) {\r\n    return html.indexOf(\'<div class=\"row\" id=\"signout\">\') !== -1;\r\n  }\r\n  \r\n  function getHiddenUser(html) {\r\n    var hiddenUserDiv = \'<div class=\"hidden\" id=\"user\">\';\r\n    var divIndex = html.indexOf(hiddenUserDiv);\r\n    if (divIndex !== -1) {\r\n      var userHtml = \'\';\r\n      var str = html.substring(divIndex + hiddenUserDiv.length, html.length);\r\n      for(var i in str) {\r\n        var c = str[i];\r\n        if (c === \'<\') {\r\n          break;\r\n        }\r\n        userHtml += c;\r\n      }\r\n      var user;\r\n      try {\r\n       var userStr = userHtml.replace(new RegExp(\'&quot;\', \'g\'), \'\"\');\r\n       var userJson = JSON.stringify(eval(\'(\'+userStr+\')\'));\r\n       user = JSON.parse(userJson);\r\n      } catch(e) { }\r\n      return user;\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n  \r\n  function testIndexView(res, opts, done) {\r\n    assert(res.status === 200, \'the server should return a 200 response \' + this.status + \' instead\');\r\n\r\n    var html = res.responseText\r\n    assert(html, \'the server should return the index html page in the response\');\r\n    \r\n    if (!opts.context) {\r\n      opts.context = \'\';\r\n    }\r\n    \r\n    \/\/ append a console log into the done callback for debugging purposes\r\n    var superDone = done || function(){};\r\n    done = function doneOverride() {\r\n      console.info(opts.context + \' index view tests passed\');\r\n      \r\n      superDone();\r\n    };\r\n    \r\n    var user = getHiddenUser(html);\r\n    if (opts.expectedAuthed) {\r\n      \r\n      var expectedUser = opts.expectedUser;\r\n      \r\n      assert(signOutViewExists(html), opts.context + \': logout sub view should be part of the page on an authenticated view\');\r\n      assert(!signInViewExists(html), opts.context + \': login & register sub views should not be part of the page on an authenticated view\');\r\n      \r\n      expectedUser.shouldEqual(user);\r\n      \r\n      if (opts.autoLogout) {\r\n        var logoutRoute = getServerRoute(\'\/auth\/logout\');  \r\n        request(\'GET\', logoutRoute, done);\r\n      } else {\r\n        done()\r\n      };\r\n    } else {\r\n      assert(!signOutViewExists(html), opts.context +\': logout sub view should not be part of the page on a non authenticated view\');\r\n      assert(signInViewExists(html), opts.context +\': login & register sub views should be part of the page on a non authenticated view\');\r\n      \r\n      assert(!user, opts.context +\': session user should not exist on a non authenticated view\');\r\n      \r\n      done();\r\n    }\r\n  }\r\n\r\n  function testSessionUser(res, isLoggedIn) {\r\n    assert(res.status === 200, \'\/api\/me: should respond with status 200, got: \' + res.status + \' instead\');\r\n    \r\n    var response = res.responseText;\r\n    \r\n    \/\/ json response assertion\r\n    var user;\r\n    try {\r\n      user = JSON.parse(response); \r\n    } catch(e) { }\r\n    assert(user, \'\/api\/me: the server should return a json object, got: \' + response + \' instead\');\r\n    assert(typeof(user) === \'object\', \'\/api\/me: the server should return a json object, got: \' + response + \' instead\');\r\n    \r\n    if (isLoggedIn) {\r\n      GUEST.shouldEqual(user);\r\n    } else {\r\n      assert(user.name ===\'guest\', \'\/api\/me: the server should response with {name: \"guest\"} when no session exists, got: \' + response + \' instead\');\r\n    }\r\n  }\r\n  \r\n  function testGeolocation(res) {\r\n    assert(res.status === 200, \'\/api\/geo: should respond with status 200, got: \' + res.status + \' instead\');  \r\n    \r\n    var response = res.responseText;\r\n    \r\n    \/\/ json response assertion\r\n    var geo;\r\n    try {\r\n      geo = JSON.parse(response); \r\n    } catch(e) { }\r\n    assert(geo, \'\/api\/geo: the server should return a json object, got: \' + response + \' instead\');\r\n    assert(typeof(geo) === \'object\', \'\/api\/geo: the server should return a json object, got: \' + response + \' instead\');\r\n    \r\n    var errPostfix = \', make sure to use the url in the description for the request to the geolocation api\';\r\n    \r\n    assert(geo.hasOwnProperty(\'ip\'), \'\/api\/geo: the server should return a json object that includes the \"ip\" property\' + errPostfix);\r\n    assert(geo.hasOwnProperty(\'city\'), \'\/api\/geo: the server should return a json object that includes the \"city\" property\' + errPostfix);\r\n    assert(geo.hasOwnProperty(\'latitude\'), \'\/api\/geo: the server should return a json object that includes the \"latitude\" property\' + errPostfix);\r\n    assert(geo.hasOwnProperty(\'longitude\'), \'\/api\/geo: the server should return a json object that includes the \"longitude\" property\' + errPostfix);\r\n    assert(geo.hasOwnProperty(\'metro_code\'), \'\/api\/geo: the server should return a json object that includes the \"metro_code\" property\' + errPostfix);\r\n    assert(geo.hasOwnProperty(\'country_code\'), \'\/api\/geo: the server should return a json object that includes the \"country_code\" property\' + errPostfix);\r\n    assert(geo.hasOwnProperty(\'country_name\'), \'\/api\/geo: the server should return a json object that includes the \"country_name\" property\' + errPostfix);\r\n    assert(geo.hasOwnProperty(\'region_code\'), \'\/api\/geo: the server should return a json object that includes the \"region_code\" property\' + errPostfix);\r\n    assert(geo.hasOwnProperty(\'region_name\'), \'\/api\/geo: the server should return a json object that includes the \"region_name\" property\' + errPostfix);\r\n    assert(geo.hasOwnProperty(\'time_zone\'), \'\/api\/geo: the server should return a json object that includes the \"time_zone\" property\' + errPostfix);\r\n    assert(geo.hasOwnProperty(\'zip_code\'), \'\/api\/geo: the server should return a json object that includes the \"zip_code\" property\' + errPostfix);\r\n\r\n    \/\/ there is no way to test the cookie saved from a cross origin response\r\n    \/\/ the cookie based geolocation is tested on the .testMessage function\r\n  }    \r\n  \r\n  this.testProjectUrl = function testProjectUrl(done) {\r\n    assert(serverUrl, \'server url should be set\');\r\n    assert(serverUrl.length > 0, \'server url should be set\');\r\n    \r\n    console.info(\'server url tests passed\');\r\n    \r\n    if (done) done();\r\n  };\r\n  \r\n  this.testIndexPage = function testIndexPage(done) {\r\n    request(\'GET\', ROUTE.INDEX, function onResponse() {\r\n      assert(this.status === 200, \'the server should return a 200 response \' + this.status + \' instead\');\r\n      var html = this.responseText;\r\n\r\n      assert(html, \'index page could not be retrieved\');\r\n      \r\n      if (challengeId >= CHALLENGE.MESSAGES_IN_VIEW) {\r\n        var chatViewExists = html.indexOf(\'<div class=\"col-sm-8 col-sm-offset-2\" id=\"chat-messages\">\') !== -1;\r\n        \r\n        var atLeastOneMessageExists = html.indexOf(\'<div class=\"message\') !== -1;\r\n        \r\n        assert(chatViewExists, \'\/: chat messages sub view should exist in index page\');\r\n        \r\n        assert(atLeastOneMessageExists, \'\/: no messages should exist in the chat messages sub view\');\r\n      }\r\n      \r\n      if (challengeId >= CHALLENGE.SIGNIN) {\r\n        assert(signInViewExists(html) || signOutViewExists(html), \'\/: authentication sub view could not be found in index page\');\r\n      }\r\n      \r\n      console.info(\'\/ tests passed\');\r\n      if (done) done();\r\n    });\r\n  };\r\n  \r\n  this.testSignInBadUsername = function testSignInBadUsername(done) {\r\n    if (challengeId >= CHALLENGE.SIGNIN) {\r\n      request(\'POST\', ROUTE.LOGIN, function onResponse() {\r\n        testIndexView(this, {\r\n          expectedAuthed: false,\r\n          autoLogout: false,\r\n          context: \'\/auth\/local fail, bad username\'\r\n        }, done);        \r\n      }, \'password=\'+GUEST.password);  \r\n      \r\n    } else if (done){\r\n      done();\r\n    }    \r\n  };\r\n  \r\n    \r\n  this.testSignInBadPassword = function testSignInBadPassword(done) {\r\n    if (challengeId >= CHALLENGE.SIGNIN) {\r\n      request(\'POST\', ROUTE.LOGIN, function onResponse() {\r\n        testIndexView(this, {\r\n          expectedAuthed: false,\r\n          autoLogout: false,\r\n          context: \'\/auth\/local fail, bad password\'\r\n        }, done);        \r\n      }, \'username=\'+GUEST.username);  \r\n      \r\n    } else if (done){\r\n      done();\r\n    }    \r\n  };\r\n  \r\n  this.testSignInNoParams = function testSignInNoParams(done) {\r\n    if (challengeId >= CHALLENGE.SIGNIN) {\r\n      request(\'POST\', ROUTE.LOGIN, function onResponse() {\r\n        testIndexView(this, {\r\n          expectedAuthed: false,\r\n          autoLogout: false,\r\n          context: \'\/auth\/local fail, no params\'\r\n        }, done);        \r\n      });  \r\n      \r\n    } else if (done){\r\n      done();\r\n    }    \r\n  };\r\n  \r\n  this.testSignInSuccess = function testSignInSuccess(done) {\r\n    if (challengeId >= CHALLENGE.SIGNIN) {\r\n\r\n      request(\'POST\', ROUTE.LOGIN, function() {\r\n        testIndexView(this, {\r\n          expectedUser: GUEST,\r\n          expectedAuthed: true,\r\n          autoLogout: challengeId >= CHALLENGE.LOGOUT,\r\n          context: \'\/auth\/local success\'\r\n        }, done);        \r\n      }, GUEST.toParams());  \r\n      \r\n    } else if (done){\r\n      done();\r\n    }    \r\n  };\r\n  \r\n  this.testLogout = function testLogoutRoute(done) {\r\n    if (challengeId >= CHALLENGE.LOGOUT) {\r\n      \r\n      request(\'POST\', ROUTE.LOGIN, function onLogin() {\r\n        testIndexView(this, {\r\n          expectedUser: GUEST,\r\n          expectedAuthed: true,\r\n          autoLogout: false,\r\n          context: \'sign in before \/auth\/logout\'\r\n        });\r\n        \r\n        request(\'GET\', ROUTE.LOGOUT, function onResponse() {\r\n          testIndexView(this, {\r\n            expectedAuthed: false,\r\n            context: \'\/auth\/logout\'\r\n          }, done);\r\n          \r\n        });\r\n        \r\n      }, GUEST.toParams());\r\n      \r\n    } else if (done){\r\n      done();\r\n    }\r\n  };\r\n  \r\n  \r\n  this.testSignupUsernameExists = function testSignupUsernameExists(done) {\r\n    if (challengeId >= CHALLENGE.SIGNUP) {\r\n      \r\n      var user = new User({\r\n        username: \'guestuser\', \/\/already exists\r\n        password: \'testUserPass\',\r\n        name: \'test user\'\r\n      });\r\n      \r\n      request(\'POST\', ROUTE.REGISTER, function onResponse() {\r\n        testIndexView(this, {\r\n          expectedAuthed: false,\r\n          context: \'\/auth\/local\/register fail, username exists\'\r\n        }, done);\r\n      }, user.toParams());\r\n      \r\n    } else if (done){\r\n      done();\r\n    }\r\n  };    \r\n  \r\n  this.testSignupBadUsername = function testSignupBadUsername(done) {\r\n    if (challengeId >= CHALLENGE.SIGNUP) {\r\n      \r\n      var user = new User({\r\n        password: \'testUserPass\',\r\n        name: \'test user\'\r\n      });\r\n      \r\n      request(\'POST\', ROUTE.REGISTER, function onResponse() {\r\n        testIndexView(this, {\r\n          expectedAuthed: false,\r\n          context: \'\/auth\/local\/register fail, bad username\'\r\n        }, done);\r\n      }, user.toParams());\r\n      \r\n    } else if (done){\r\n      done();\r\n    }\r\n  };    \r\n  \r\n  this.testSignupBadPassword = function testSignupBadPassword(done) {\r\n    if (challengeId >= CHALLENGE.SIGNUP) {\r\n      \r\n      var user = new User({\r\n        username: \'testUser\'+Date.now(),\r\n        name: \'test user\'\r\n      });\r\n      \r\n      request(\'POST\', ROUTE.REGISTER, function onResponse() {\r\n        testIndexView(this, {\r\n          expectedAuthed: false,\r\n          context: \'\/auth\/local\/register fail, bad password\'\r\n        }, done);\r\n      }, user.toParams());\r\n      \r\n    } else if (done){\r\n      done();\r\n    }\r\n  };  \r\n  \r\n  this.testSignupNoParams = function testSignupNoParams(done) {\r\n    if (challengeId >= CHALLENGE.SIGNUP) {\r\n\r\n      request(\'POST\', ROUTE.REGISTER, function onResponse() {\r\n        testIndexView(this, {\r\n          expectedAuthed: false,\r\n          context: \'\/auth\/local\/register fail, no params\'\r\n        }, done);\r\n      });\r\n      \r\n    } else if (done){\r\n      done();\r\n    }\r\n  };    \r\n  \r\n  this.testSignupSuccess = function testSignupSuccess(done) {\r\n    if (challengeId >= CHALLENGE.SIGNUP) {\r\n      \r\n      var user = new User({\r\n        username: \'testUser\'+Date.now(),\r\n        password: \'testUserPass\',\r\n        name: \'test user\'\r\n      });\r\n      \r\n      request(\'POST\', ROUTE.REGISTER, function onResponse() {\r\n        testIndexView(this, {\r\n          expectedUser: user,\r\n          expectedAuthed: true,\r\n          autoLogout: true,\r\n          context: \'\/auth\/local\/register success\'\r\n        }, done);\r\n      }, user.toParams());\r\n      \r\n    } else if (done){\r\n      done();\r\n    }\r\n  };\r\n  \r\n  this.testApiMessage403 = function testApiMessage403(done) {\r\n    if (challengeId >= CHALLENGE.CREATE_MESSAGE) {\r\n      request(\'POST\', ROUTE.MESSAGE, function onPermissionDenied() {\r\n        assert(this.status === 403, \'\/api\/message: the server should return a 403 response when the user is not authenticated, got \' + this.status + \' instead\');\r\n        console.info(\'\/api\/message 403 tests passed\');\r\n        if(done) done();\r\n      });\r\n      \r\n    } else if (done) {\r\n      done();\r\n    }\r\n  };\r\n  \r\n  this.testApiMessage400 = function testApiMessage400(done) {\r\n    if (challengeId >= CHALLENGE.CREATE_MESSAGE) {\r\n\r\n      \/\/ setup\r\n      request(\'POST\', ROUTE.LOGIN, function onLogin() {\r\n        testIndexView(this, {\r\n          expectedUser: GUEST,\r\n          expectedAuthed: true,\r\n          autoLogout: false,\r\n          context: \'sign in before \/api\/message 400\'\r\n        });\r\n        \r\n        \/\/ test\r\n        request(\'POST\', ROUTE.MESSAGE, function onBadRequest() {\r\n          assert(this.status === 400, \'\/api\/message: the server should return a 400 response when the db service callbacks with error, got \' + this.status + \' instead\');\r\n          \r\n          \/\/ cleaup\r\n          request(\'GET\', ROUTE.LOGOUT, function onResponse() {\r\n            testIndexView(this, {\r\n              expectedAuthed: false,\r\n              context: \'\/api\/message 400\'\r\n            }, done);\r\n          });\r\n        });\r\n      }, GUEST.toParams());\r\n      \r\n    } else if (done) {\r\n      done();\r\n    }\r\n  };  \r\n  \r\n  this.testApiMessage201 = function testApiMessage201(done) {\r\n    if (challengeId >= CHALLENGE.CREATE_MESSAGE) {\r\n      \r\n      var self = this;\r\n      \r\n      var message = new Message({text: \'Hello!\'});\r\n      \r\n      \/\/ cleanup\r\n      var doneSuper = done;\r\n      done = function doneOverride() {\r\n        request(\'GET\', ROUTE.LOGOUT, function onResponse() {\r\n          testIndexView(this, {\r\n            expectedAuthed: false,\r\n            context: \'\/api\/message 201\'\r\n          }, doneSuper);\r\n        });\r\n      };\r\n\r\n      function testJsonResponse(response, isSocket) {\r\n        \/\/ json response assertion\r\n        var jsonResponse;\r\n        try {\r\n          \/\/ http response will be a string, but socket.io will be an object\r\n          if (!isSocket) {\r\n            jsonResponse = JSON.parse(response); \r\n          } else {\r\n            jsonResponse = response;\r\n          }\r\n        } catch(e) { }\r\n        \r\n        var resLabel = !isSocket ? \'response\' : \'socket message\';\r\n        \r\n        assert(jsonResponse, \'\/api\/message: the server \'+resLabel+\' should be a json object, got: \' + response + \' instead\');\r\n        assert(typeof(jsonResponse) === \'object\', \'\/api\/message: the server \'+resLabel+\' should be a json object, got: \' + response + \' instead\');\r\n        \r\n        \/\/ model assertion\r\n        var model = jsonResponse.model;\r\n        assert(model, \'\/api\/message: the server \'+resLabel+\' should include a model property, got \' + model + \' instead\');\r\n        assert(message.text === model.text, \'\/api\/message: the server \'+resLabel+\', text property should equal with \"\'+message.text+\'\" got \' + model.text + \' instead\');\r\n        \r\n        \/\/ view assertion\r\n        if (challengeId >= CHALLENGE.CREATE_MESSAGE_WITH_VIEW) {\r\n          var view = jsonResponse.view;\r\n          \r\n          assert(view, \'\/api\/message: the server \'+resLabel+\' should include a view property, got \' + view + \' instead\');\r\n          \r\n          \/\/ check message element class\r\n          var messageElemClassTag = \'<div class=\"message row\"><div class=\"col-xs-12\"><div class=\"message-\'+(isSocket ? \'received\' : \'sent\')+\'\">\';\r\n          assert(view.indexOf(messageElemClassTag) !== -1, \'\/api\/message: the server \'+resLabel+\' view should be a partially compiled messageMixin with the message-sent class\');\r\n          \r\n          \/\/ check message text value\r\n          var messageTextTag = \'<p class=\"message-text\'+(isSocket ? \'\' : \' pull-right\')+\'\">Hello!<\/p>\';\r\n          assert(view.indexOf(messageTextTag) !== -1, \'\/api\/message: the server \'+resLabel+\' view should include the message\\\'s text tag: \' + messageTextTag);\r\n          \r\n          \/\/ check the message footer value, it is based on the geolocation cookie existence\r\n          \/\/ (created on GET \/api\/geo after challenge GET_GEO_AND_SET_COOKIE)\r\n          var messageFooterTag = \'<p class=\"message-footer\'+ (isSocket ? \'\' : \' pull-right\') + \'\">\';\r\n          var footerIndex = view.indexOf(messageFooterTag);\r\n          assert(footerIndex !== -1, \'\/api\/message: the server \'+resLabel+\' view should include the message\\\'s footer tag: \' + messageFooterTag);\r\n        \r\n          \/\/ when a cookie exists in the browser the footer should be something like \'just now, Europe\/Athens\'\r\n          \/\/ when it does not, it should just be \'just now\'\r\n          \/\/\r\n          \/\/ the cookie existence is based on if CHALLENGE.GET_GEO_AND_SET_COOKIE is paseed\r\n          var expectedFooterPrefix = challengeId >= CHALLENGE.GET_GEO_AND_SET_COOKIE ? \'just now, \' : \'just now\';\r\n          \r\n          var startsAt = footerIndex + messageFooterTag.length;\r\n          var endsAt = startsAt + expectedFooterPrefix.length;\r\n          var footerPrefix = view.substring(startsAt, endsAt);\r\n          \r\n          assert(footerPrefix === expectedFooterPrefix, \'\/api\/message: the server \'+resLabel+\' view should include the location in the message footer, \'\r\n                                                       +\'make sure that the cookie parser works properly & that the cookie is set on \/api\/geo\');\r\n        }\r\n      }\r\n\r\n      \/\/ setup\r\n      request(\'POST\', ROUTE.LOGIN, function onLogin() {\r\n        testIndexView(this, {\r\n          expectedUser: GUEST,\r\n          expectedAuthed: true,\r\n          autoLogout: false,\r\n          context: \'sign in before \/api\/message 201\'\r\n        });\r\n        \r\n        \/\/ test\r\n        var socketResponse;\r\n        if (challengeId >= CHALLENGE.CREATE_MESSAGE_WITH_SOCKETS) {\r\n          var socket = io(ROUTE.INDEX);\r\n          socket.on(\'chat.message\', function(messageReceived) {\r\n            socketResponse = messageReceived;\r\n          });\r\n        }\r\n        \r\n        \/\/ request the geolocation so that the cookie is set, in case we are testing after CHALLENGE.GET_GEO_AND_SET_COOKIE\r\n        request(\'GET\', ROUTE.GEO, function onResponse() {\r\n        \r\n          request(\'POST\', ROUTE.MESSAGE, function onSuccessRequest() {\r\n            assert(this.status === 201, \'\/api\/message: the server should return a 201 response when the db service creates an entry, got \' + this.status + \' instead\');\r\n            testJsonResponse(this.responseText, false);\r\n            \r\n            if (challengeId >= CHALLENGE.CREATE_MESSAGE_WITH_SOCKETS) {\r\n              setTimeout(function waitForSocketEvent() {\r\n                assert(socketResponse, \'\/api\/message::socket: the server did not emit a socket event upon message creation\');\r\n                \r\n                testJsonResponse(socketResponse, true);\r\n                \r\n                done();\r\n              }, 500);\r\n            } else {\r\n              done();\r\n            }\r\n            \r\n          }, message.toParams());\r\n        \r\n        }, \'noTextKey=someMessage\');\r\n        \r\n      }, GUEST.toParams());\r\n      \r\n    } else if (done){\r\n      done();\r\n    }\r\n  };\r\n  \r\n  this.testApiMeGuest = function testApiMeGuest(done) {\r\n    if (challengeId >= CHALLENGE.GET_SESSION) {\r\n      request(\'GET\', ROUTE.ME, function onResponse() {\r\n        testSessionUser(this, false);\r\n        console.info(\'\/api\/me guest tests passed\');\r\n        if(done) done();\r\n      });\r\n    } else if (done) {\r\n      done();\r\n    }\r\n  };\r\n  \r\n  this.testApiMe = function testApiMe(done) {\r\n    if (challengeId >= CHALLENGE.GET_SESSION) {\r\n      \r\n      \/\/ setup\r\n      request(\'POST\', ROUTE.LOGIN, function onLogin() {\r\n        testIndexView(this, {\r\n          expectedUser: GUEST,\r\n          expectedAuthed: true,\r\n          autoLogout: false,\r\n          context: \'sign in before \/api\/me\'\r\n        });\r\n\r\n        \/\/ test\r\n        request(\'GET\', ROUTE.ME, function onResponse() {\r\n          testSessionUser(this, true);\r\n          \r\n          \/\/ cleanup\r\n          request(\'GET\', ROUTE.LOGOUT, function onResponse() {\r\n            testIndexView(this, {\r\n              expectedAuthed: false,\r\n              context: \'\/api\/me\'\r\n            }, done);\r\n            \r\n          });\r\n        });\r\n        \r\n      }, GUEST.toParams());\r\n\r\n    } else if (done) {\r\n      done();\r\n    }\r\n  };\r\n  \r\n  this.testApiGeo403 = function testApiGeo403(done) {\r\n    if (challengeId >= CHALLENGE.GET_GEO) {\r\n      request(\'GET\', ROUTE.GEO, function onResponse() {\r\n        assert(this.status === 403, \'\/api\/geo: should respond with status 403 on non authenticated users, got: \' + this.status + \' instead\');  \r\n        console.info(\'\/api\/geo 403 tests passed\');\r\n        if(done) done();\r\n      });\r\n    } else if (done) {\r\n      done();\r\n    }\r\n  }\r\n  \r\n  this.testApiGeo200 = function testApiGeo200(done) {\r\n    if (challengeId >= CHALLENGE.GET_GEO) {\r\n      \r\n      \/\/ setup\r\n      request(\'POST\', ROUTE.LOGIN, function onLogin() {\r\n        testIndexView(this, {\r\n          expectedUser: GUEST,\r\n          expectedAuthed: true,\r\n          autoLogout: false,\r\n          context: \'sign in before \/api\/geo 200\'\r\n        });\r\n        \r\n        \/\/ test\r\n        request(\'GET\', ROUTE.GEO, function onResponse() {\r\n          testGeolocation(this);\r\n          \r\n          \/\/cleanup\r\n          request(\'GET\', ROUTE.LOGOUT, function onResponse() {\r\n            testIndexView(this, {\r\n              expectedAuthed: false,\r\n              context: \'\/api\/geo 200\'\r\n            }, done);\r\n          });\r\n          \r\n        });\r\n        \r\n      }, GUEST.toParams());\r\n\r\n    } else if (done) {\r\n      done();\r\n    }\r\n  };\r\n\r\n  this.testDefaultAvatar = function testDefaultAvatar(done) {\r\n    if (challengeId >= CHALLENGE.GET_DEFAULT_AVATAR) {\r\n\r\n      request(\'GET\', ROUTE.AVATAR_DEFAULT, function onRemoteAvatarResponse() {\r\n        assert(this.status === 200, \'\/avatar\/default should respond with status 200\');\r\n        assert(this.responseText && this.responseText.length > 0, \'\/avatar\/default should pipe the avatar image to the response\');\r\n\r\n        var remoteAvatarText = this.responseText;\r\n        request(\'GET\', \'\/default-avatar.png\', function onThisAvatarResponse() {\r\n          assert(this.responseText === remoteAvatarText, \'\/avatar\/default should pipe the avatar image as specified in the description\');\r\n\r\n          console.info(\'\/avatar\/default tests passed\');\r\n\r\n          if (done) done();\r\n        });\r\n        \r\n      });\r\n      \r\n    } else if (done){\r\n      done();\r\n    }\r\n  };\r\n  \r\n}\r\n\r\nvar tester = new ChallengeTester(appUrl, challengeId, assert);",

  tests: [
    {
      text: "project url is valid",
      testString: "tester.testProjectUrl(runNextTest);"
    },
    {
      text: "/ success",
      testString: "tester.testIndexPage(runNextTest);"
    },
    {
      text: "/auth/logout success",
      testString: "tester.testLogout(runNextTest);"
    },
    {
      text: "/auth/local fail, bad username",
      testString: "tester.testSignInBadUsername(runNextTest);"
    },
    {
      text: "/auth/local fail, bad password",
      testString: "tester.testSignInBadPassword(runNextTest);"
    },
    {
      text: "/auth/local fail, no params",
      testString: "tester.testSignInNoParams(runNextTest);"
    },
    {
      text: "/auth/local success",
      testString: "tester.testSignInSuccess(runNextTest);"
    },
    {
      text: "/auth/local/register fail, username exists",
      testString: "tester.testSignupUsernameExists(runNextTest);"
    },
    {
      text: "/auth/local/register fail, bad username",
      testString: "tester.testSignupBadUsername(runNextTest);"
    },
    {
      text: "/auth/local/register fail, bad password",
      testString: "tester.testSignupBadPassword(runNextTest);"
    },
    {
      text: "/auth/local/register fail, no params",
      testString: "tester.testSignupNoParams(runNextTest);"
    },
    {
      text: "/auth/local/register success",
      testString: "tester.testSignupSuccess(runNextTest);"
    },
    {
      text: "/api/me 200 guest",
      testString: "tester.testApiMeGuest(runNextTest);"
    },
    {
      text: "/api/me 200",
      testString: "tester.testApiMe(runNextTest);"
    },
    {
      text: "/api/geo 403",
      testString: "tester.testApiGeo403(runNextTest);"
    },
    {
      text: "/api/geo 200",
      testString: "tester.testApiGeo200(runNextTest);"
    },
    {
      text: "/api/message 403",
      testString: "tester.testApiMessage403(runNextTest);"
    },
    {
      text: "/api/message 400",
      testString: "tester.testApiMessage400(runNextTest);"
    },
    {
      text: "/api/message 201",
      testString: "tester.testApiMessage201(runNextTest);"
    },
    {
      text: "/avatar/default success",
      testString: "tester.testDefaultAvatar(runNextTest);"
    }
  ]
};
